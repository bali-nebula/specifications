
$rule: definition

$TOKEN: regular expression

$document: component EOL EOF

$component: entity context?

$context: "(" parameters ")"

$parameters:
	parameter ("," parameter)* |
	EOL (parameter EOL)+

$parameter: name ":" component

$name: SYMBOL

$entity: element | string | collection | procedure

$documentation: NOTE | COMMENT

$NOTE: "! " (!EOL)*

$COMMENT: "!>" EOL (COMMENT | CHARACTER)*? EOL TAB* "<!"

$element:
	ANGLE | BOOLEAN | DURATION | MOMENT | NUMBER | PATTERN |
	PERCENTAGE | PROBABILITY | RESOURCE | SYMBOL | TAG

$ANGLE: "~" (REAL | ZERO)

$BOOLEAN: "false" | "true"

$DURATION: "~" SIGN? "P" (WEEKS | DATES TIMES?)

$WEEKS: TSPAN "W"

$DATES: (TSPAN "Y")? (TSPAN "M")? (TSPAN "D")?

$TIMES: "T" (TSPAN "H")? (TSPAN "M")? (TSPAN "S")?

$TSPAN: ZERO | ORDINAL FRACTION?

$MOMENT: "<" YEAR ("-" MONTH ("-" DAY ("T" HOUR (":" MINUTE (":" SECOND FRACTION?)?)?)?)?)? ">"

$YEAR: SIGN? ORDINAL

$MONTH: [0][1-9] | [1][012]

$DAY: [012][1-9] | [3][01]

$HOUR: [01][0-9] | [2][0-3]

$MINUTE: [0-5][0-9]

$SECOND: [0-5][0-9] | [6][01]

$NUMBER: IMAGINARY | REAL | ZERO | INFINITY | UNDEFINED | "(" (RECTANGULAR | POLAR) ")"

$INFINITY: "infinity" | "∞"

$UNDEFINED: "undefined"

$IMAGINARY:  (SIGN | REAL)? "i"

$RECTANGULAR:  REAL ", " IMAGINARY

$POLAR: REAL "e^" ANGLE "i"

$PATTERN: NONE | REGEX | ANY

$NONE: "none"

$REGEX: '"' RUNE+ '"?'

$ANY: "any"

$PERCENTAGE: (REAL | ZERO) "%"

$PROBABILITY: FRACTION | ONE

$ONE: "1."

$RESOURCE: "<" SCHEME ":" ("//" AUTHORITY)? "/" PATH ("?" QUERY)? ("#" FRAGMENT)? ">"

$SCHEME: [a-zA-Z][0-9a-zA-Z+-.]*

$AUTHORITY: (![/])+

$PATH: (![?#])*

$QUERY: (![#>])*

$FRAGMENT: (![>])+

$SYMBOL: "$" IDENTIFIER+ ("-" ORDINAL)?

$TAG: "#" BASE32+

$BASE32: [0-9A-DF-HJ-NP-TV-Z]

$string: BINARY | MONIKER | NARRATIVE | QUOTE | VERSION

$BINARY: "'" (BASE64 | WHITESPACE)* "'"

$WHITESPACE: \p{Separator}

$BASE64: [A-Za-z0-9+/]

$MONIKER: ("/" NAME)+

$SEPARATOR: [-+.]

$NAME: LETTER (SEPARATOR? (LETTER | DIGIT))*

$NARRATIVE: '">' EOL (NARRATIVE | CHARACTER)* EOL TAB* '<"'

$QUOTE: '"' RUNE* '"'

$VERSION: "v" ORDINAL ("." ORDINAL)*

$collection: "[" sequence "]"

$sequence: catalog | slice | list

$list:
	component ("," component)* |
	EOL (component NOTE? EOL)* |
	/* no items */

$catalog:
	association ("," association)* |
	EOL (association NOTE? EOL)* |
	":" /* no associations */

$association: primitive ":" component

$primitive: element | string

$slice: value? (".." | "..<" | "<..<" | "<..") value?

$value: element | string | variable

$variable: IDENTIFIER

$procedure: "{" statements "}"

$statements:
	statement (";" statement)* |
	EOL ((documentation | statement) EOL)* |
	/* no statements */

$statement: mainClause handleClause?

$mainClause:
	evaluateClause |
	onClause |
	ifClause |
	withClause |
	whileClause |
	continueClause |
	breakClause |
	returnClause |
	throwClause |
	saveClause |
	discardClause |
	notarizeClause |
	checkoutClause |
	publishClause |
	postClause |
	retrieveClause |
	acceptClause |
	rejectClause

$evaluateClause: (recipient (":=" | "+=" | "-=" | "*="))? expression

$recipient: name | attribute

$name: SYMBOL

$variable: IDENTIFIER

$attribute: variable "[" indices "]"

$indices: expression ("," expression)*

$onClause: "on" expression ("matching" expression "do" block)+

$block: "{" statements "}"

$ifClause: "if" (expression "do" block)+

$block: "{" statements "}"

$withClause: "with" ("each" item "in")? expression "do" block

$item: SYMBOL

$block: "{" statements "}"

$whileClause: "while" expression "do" block

$block: "{" statements "}"

$continueClause: "continue" "loop"

$breakClause: "break" "loop"

$returnClause: "return" expression?

$throwClause: "throw" expression

$saveClause: "save" expression ("as" recipient)?

$recipient: name | attribute

$name: SYMBOL

$attribute: variable "[" indices "]"

$variable: IDENTIFIER

$indices: expression ("," expression)*

$discardClause: "discard" expression

$notarizeClause: "notarize" expression "as" expression

$checkoutClause: "checkout" recipient ("at" "level" expression)? "from" expression

$recipient: name | attribute

$name: SYMBOL

$attribute: variable "[" indices "]"

$variable: IDENTIFIER

$indices: expression ("," expression)*

$publishClause: "publish" expression

$postClause: "post" expression "to" expression

$retrieveClause: "retrieve" recipient "from" expression

$recipient: name | attribute

$name: SYMBOL

$attribute: variable "[" indices "]"

$variable: IDENTIFIER

$indices: expression ("," expression)*

$acceptClause: "accept" expression

$rejectClause: "reject" expression

$handleClause: "handle" exception ("matching" expression "with" block)+

$exception: SYMBOL

$block: "{" statements "}"

$expression:
	component |
	variable |
	functionExpression |
	precedenceExpression |
	dereferenceExpression |
	messageExpression |
	attributeExpression |
	chainExpression |
	powerExpression |
	inversionExpression |
	arithmeticExpression |
	magnitudeExpression |
	comparisonExpression |
	complementExpression |
	logicalExpression |
	defaultExpression

$functionExpression: function "(" arguments? ")"

$function: IDENTIFIER

$arguments: expression ("," expression)*

$precedenceExpression: "(" expression ")"

$dereferenceExpression: "@" expression

$messageExpression: expression ("." | "<-") message "(" arguments? ")"

$message: IDENTIFIER

$arguments: expression ("," expression)*

$attributeExpression: expression "[" indices "]"

$indices: expression ("," expression)*

$chainExpression: expression "&" expression

$powerExpression: expression "^" expression

$inversionExpression: ("-" | "/" | "*") expression

$arithmeticExpression: expression ("*" | "/" | "//" | "+" | "-") expression

$magnitudeExpression: "|" expression "|"

$comparisonExpression: expression ("<" | "=" | ">" | "≠" | "IS" | "MATCHES") expression

$complementExpression: "NOT" expression

$logicalExpression: expression ("AND" | "SANS" | "XOR" | "OR") expression

$defaultExpression: expression "?" expression

$CHARACTER: .*

$DELIMITER: 
	"}" | "|" | "{" | "^" | "]" | "[" | "@" | "?" | ">" | "=" |
	"<..<" | "<.." | "<-" | "<" | ";" | ":=" | ":" | "/=" | "//" | "/" |
	"..<" | ".." | "." | "-=" | "-" | "," | "+=" | "+" | "*=" | "*" |
	")" | "(" | "&"

$DIGIT: \p{Number}

$EOL: "\n"

$FRACTION: .[0-9]+

$IDENTIFIER: LETTER (LETTER | DIGIT)*

$KEYWORD:
	"with" | "while" | "to" | "throw" | "select" | "save" |
	"return" | "retrieve" | "reject" | "publish" | "post" |
	"notarize" | "matching" | "loop" | "level" | "in" | "if" |
	"handle" | "from" | "each" | "do" | "discard" | "continue" |
	"checkout" | "break" | "at" | "as" | "any" | "accept" |
	"XOR" | "SANS" | "OR" | "NOT" | "MATCHES" | "IS" | "AND"

$LETTER: \p{Letter}

$ORDINAL: [1-9][0-9]*

$REAL: SIGN? (E | PI | PHI | TAU | SCALAR)

$E: "e"

$PI: "pi" | "π"

$PHI: "phi" | "φ"

$TAU: "tau" | "τ"

$SCALAR: (ORDINAL FRACTION? | ZERO FRACTION) EXPONENT?

$EXPONENT: "E" SIGN? ORDINAL

$RUNE: ESCAPE | '\"' | !["\r\n]

$ESCAPE: "\" (UNICODE | [bfrnt\])

$UNICODE: "u" BASE16{4}

$BASE16: [0-9a-f]

$SIGN: [+-]

$TAB: "\t"

$ZERO: "0"
